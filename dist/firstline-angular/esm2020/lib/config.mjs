import { InjectionToken, Injectable, Optional, Inject } from '@angular/core';
import * as i0 from "@angular/core";
;
/**
 * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.
 *
 * @param def The route definition type
 */
export function isHttpInterceptorRouteConfig(def) {
    return typeof def !== 'string';
}
/**
 * Injection token for accessing configuration.
 *
 * @usageNotes
 *
 * Use the `Inject` decorator to access the configuration from a service or component:
 *
 * ```
 * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}
 * ```
 */
export const AuthConfigService = new InjectionToken('firstline.config');
/**
 * Gets and sets configuration for the internal client. This can be
 * used to provide configuration outside of using AuthModule.forRoot, i.e. from
 * a factory provided by APP_INITIALIZER.
 */
export class AuthClientConfig {
    constructor(config) {
        if (config) {
            this.set(config);
        }
    }
    /**
     * Sets configuration to be read by other consumers of the service (see usage notes)
     *
     * @param config The configuration to set
     */
    set(config) {
        this.config = config;
    }
    /**
     * Gets the config that has been set by other consumers of the service
     */
    get() {
        return this.config;
    }
}
AuthClientConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: AuthClientConfig, deps: [{ token: AuthConfigService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuthClientConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: AuthClientConfig, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: AuthClientConfig, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AuthConfigService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFlekMsQ0FBQztBQVVyQzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDRCQUE0QixDQUMxQyxHQUF1QjtJQUV2QixPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQztBQUNqQyxDQUFDO0FBdUZEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsa0JBQWtCLENBQ25CLENBQUM7QUFFRjs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFtRCxNQUFtQjtRQUNwRSxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEdBQUcsQ0FBQyxNQUFrQjtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxHQUFHO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBb0IsQ0FBQztJQUNuQyxDQUFDOzs2R0F2QlUsZ0JBQWdCLGtCQUdLLGlCQUFpQjtpSEFIdEMsZ0JBQWdCLGNBREgsTUFBTTsyRkFDbkIsZ0JBQWdCO2tCQUQ1QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7MEJBSW5CLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlyc3RsaW5lQ2xpZW50T3B0aW9ucyB9IGZyb20gXCJAZmlyc3QtbGluZS9maXJzdGxpbmUtc3BhLWpzXCJcclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGEgY29tbW9uIHNldCBvZiBIVFRQIG1ldGhvZHMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBIdHRwTWV0aG9kIHtcclxuICBHZXQgPSAnR0VUJyxcclxuICBQb3N0ID0gJ1BPU1QnLFxyXG4gIFB1dCA9ICdQVVQnLFxyXG4gIFBhdGNoID0gJ1BBVENIJyxcclxuICBEZWxldGUgPSAnREVMRVRFJyxcclxuICBIZWFkID0gJ0hFQUQnLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEdldFRva2VuT3B0aW9ucyB7IH07XHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgdHlwZSBmb3IgYSByb3V0ZSBjb25maWcgZW50cnkuIENhbiBlaXRoZXIgYmU6XHJcbiAqXHJcbiAqIC0gYW4gb2JqZWN0IG9mIHR5cGUgSHR0cEludGVyY2VwdG9yUm91dGVDb25maWdcclxuICogLSBhIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQXBpUm91dGVEZWZpbml0aW9uID0gSHR0cEludGVyY2VwdG9yUm91dGVDb25maWcgfCBzdHJpbmc7XHJcblxyXG4vKipcclxuICogQSBjdXN0b20gdHlwZSBndWFyZCB0byBoZWxwIGlkZW50aWZ5IHJvdXRlIGRlZmluaXRpb25zIHRoYXQgYXJlIGFjdHVhbGx5IEh0dHBJbnRlcmNlcHRvclJvdXRlQ29uZmlnIHR5cGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGVmIFRoZSByb3V0ZSBkZWZpbml0aW9uIHR5cGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0h0dHBJbnRlcmNlcHRvclJvdXRlQ29uZmlnKFxyXG4gIGRlZjogQXBpUm91dGVEZWZpbml0aW9uXHJcbik6IGRlZiBpcyBIdHRwSW50ZXJjZXB0b3JSb3V0ZUNvbmZpZyB7XHJcbiAgcmV0dXJuIHR5cGVvZiBkZWYgIT09ICdzdHJpbmcnO1xyXG59XHJcblxyXG4vKipcclxuICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIEh0dHBJbnRlcmNlcHRvclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBIdHRwSW50ZXJjZXB0b3JDb25maWcge1xyXG4gIGFsbG93ZWRMaXN0OiBBcGlSb3V0ZURlZmluaXRpb25bXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGEgc2luZ2xlIGludGVyY2VwdG9yIHJvdXRlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBJbnRlcmNlcHRvclJvdXRlQ29uZmlnIHtcclxuICAvKipcclxuICAgKiBUaGUgVVJMIHRvIHRlc3QsIGJ5IHN1cHBseWluZyB0aGUgVVJMIHRvIG1hdGNoLlxyXG4gICAqIElmIGB0ZXN0YCBpcyBhIG1hdGNoIGZvciB0aGUgY3VycmVudCByZXF1ZXN0IHBhdGggZnJvbSB0aGUgSFRUUCBjbGllbnQsIHRoZW5cclxuICAgKiBhbiBhY2Nlc3MgdG9rZW4gaXMgYXR0YWNoZWQgdG8gdGhlIHJlcXVlc3QgaW4gdGhlXHJcbiAgICogIFtcIkF1dGhvcml6YXRpb25cIiBoZWFkZXJdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLW9hdXRoLXYyLWJlYXJlci0yMCNzZWN0aW9uLTIuMSkuXHJcbiAgICpcclxuICAgKiBJZiB0aGUgdGVzdCBkb2VzIG5vdCBwYXNzLCB0aGUgcmVxdWVzdCBwcm9jZWVkcyB3aXRob3V0IHRoZSBhY2Nlc3MgdG9rZW4gYXR0YWNoZWQuXHJcbiAgICpcclxuICAgKiBBIHdpbGRjYXJkIGNoYXJhY3RlciBjYW4gYmUgdXNlZCB0byBtYXRjaCBvbmx5IHRoZSBzdGFydCBvZiB0aGUgVVJMLlxyXG4gICAqXHJcbiAgICogQHVzYWdlbm90ZXNcclxuICAgKlxyXG4gICAqICcvYXBpJyAtIGV4YWN0bHkgbWF0Y2ggdGhlIHJvdXRlIC9hcGlcclxuICAgKiAnL2FwaS8qJyAtIG1hdGNoIGFueSByb3V0ZSB0aGF0IHN0YXJ0cyB3aXRoIC9hcGkvXHJcbiAgICovXHJcbiAgdXJpPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgSHR0cFJlcXVlc3QudXJsIHZhbHVlLCBhbGxvd2luZyB5b3UgdG8gZG9cclxuICAgKiBhbnkga2luZCBvZiBmbGV4aWJsZSBtYXRjaGluZy5cclxuICAgKlxyXG4gICAqIElmIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0cnVlLCB0aGVuXHJcbiAgICogYW4gYWNjZXNzIHRva2VuIGlzIGF0dGFjaGVkIHRvIHRoZSByZXF1ZXN0IGluIHRoZVxyXG4gICAqICBbXCJBdXRob3JpemF0aW9uXCIgaGVhZGVyXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi1vYXV0aC12Mi1iZWFyZXItMjAjc2VjdGlvbi0yLjEpLlxyXG4gICAqXHJcbiAgICogSWYgaXQgcmV0dXJucyBmYWxzZSwgdGhlIHJlcXVlc3QgcHJvY2VlZHMgd2l0aG91dCB0aGUgYWNjZXNzIHRva2VuIGF0dGFjaGVkLlxyXG4gICAqL1xyXG4gIHVyaU1hdGNoZXI/OiAodXJpOiBzdHJpbmcpID0+IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBvcHRpb25zIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgU0RLIHdoZW4gcmV0cmlldmluZyB0aGVcclxuICAgKiBhY2Nlc3MgdG9rZW4gdG8gYXR0YWNoIHRvIHRoZSBvdXRnb2luZyByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIHRva2VuT3B0aW9ucz86IEdldFRva2VuT3B0aW9ucztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIEhUVFAgbWV0aG9kIHRvIG1hdGNoIG9uLiBJZiBzcGVjaWZpZWQsIHRoZSBIVFRQIG1ldGhvZCBvZlxyXG4gICAqIHRoZSBvdXRnb2luZyByZXF1ZXN0IHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IHRoaXMuIElmIHRoZXJlIGlzIG5vIG1hdGNoLCB0aGVcclxuICAgKiBBdXRob3JpemF0aW9uIGhlYWRlciBpcyBub3QgYXR0YWNoZWQuXHJcbiAgICpcclxuICAgKiBUaGUgSFRUUCBtZXRob2QgbmFtZSBpcyBjYXNlLXNlbnNpdGl2ZS5cclxuICAgKi9cclxuICBodHRwTWV0aG9kPzogSHR0cE1ldGhvZCB8IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQWxsb3cgdGhlIEhUVFAgY2FsbCB0byBiZSBleGVjdXRlZCBhbm9ueW1vdXNseSwgd2hlbiBubyB0b2tlbiBpcyBhdmFpbGFibGUuXHJcbiAgICpcclxuICAgKiBXaGVuIG9taXR0ZWQgKG9yIHNldCB0byBmYWxzZSksIGNhbGxzIHRoYXQgbWF0Y2ggdGhlIGNvbmZpZ3VyYXRpb24gd2lsbCBmYWlsIHdoZW4gbm8gdG9rZW4gaXMgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIGFsbG93QW5vbnltb3VzPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBhdXRoZW50aWNhdGlvbiBzZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhDb25maWcgZXh0ZW5kcyBGaXJzdGxpbmVDbGllbnRPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgYnVpbHQtaW4gSHR0cCBJbnRlcmNlcHRvciwgdXNlZCBmb3JcclxuICAgKiBhdXRvbWF0aWNhbGx5IGF0dGFjaGluZyBhY2Nlc3MgdG9rZW5zLlxyXG4gICAqL1xyXG4gIGh0dHBJbnRlcmNlcHRvcj86IEh0dHBJbnRlcmNlcHRvckNvbmZpZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuZ3VsYXIgc3BlY2lmaWMgc3RhdGUgdG8gYmUgc3RvcmVkIGJlZm9yZSByZWRpcmVjdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBcHBTdGF0ZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFueSBjdXN0b20gcGFyYW1ldGVyIHRvIGJlIHN0b3JlZCBpbiBhcHBTdGF0ZVxyXG4gICAqL1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgYWNjZXNzaW5nIGNvbmZpZ3VyYXRpb24uXHJcbiAqXHJcbiAqIEB1c2FnZU5vdGVzXHJcbiAqXHJcbiAqIFVzZSB0aGUgYEluamVjdGAgZGVjb3JhdG9yIHRvIGFjY2VzcyB0aGUgY29uZmlndXJhdGlvbiBmcm9tIGEgc2VydmljZSBvciBjb21wb25lbnQ6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBjbGFzcyBNeVNlcnZpY2UoQEluamVjdChBdXRoQ29uZmlnU2VydmljZSkgY29uZmlnOiBBdXRoQ29uZmlnKSB7fVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjb25zdCBBdXRoQ29uZmlnU2VydmljZSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBdXRoQ29uZmlnPihcclxuICAnZmlyc3RsaW5lLmNvbmZpZydcclxuKTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFuZCBzZXRzIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBpbnRlcm5hbCBjbGllbnQuIFRoaXMgY2FuIGJlXHJcbiAqIHVzZWQgdG8gcHJvdmlkZSBjb25maWd1cmF0aW9uIG91dHNpZGUgb2YgdXNpbmcgQXV0aE1vZHVsZS5mb3JSb290LCBpLmUuIGZyb21cclxuICogYSBmYWN0b3J5IHByb3ZpZGVkIGJ5IEFQUF9JTklUSUFMSVpFUi5cclxuICovXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBBdXRoQ2xpZW50Q29uZmlnIHtcclxuICBwcml2YXRlIGNvbmZpZz86IEF1dGhDb25maWc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQXV0aENvbmZpZ1NlcnZpY2UpIGNvbmZpZz86IEF1dGhDb25maWcpIHtcclxuICAgIGlmIChjb25maWcpIHtcclxuICAgICAgdGhpcy5zZXQoY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgY29uZmlndXJhdGlvbiB0byBiZSByZWFkIGJ5IG90aGVyIGNvbnN1bWVycyBvZiB0aGUgc2VydmljZSAoc2VlIHVzYWdlIG5vdGVzKVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiB0byBzZXRcclxuICAgKi9cclxuICBzZXQoY29uZmlnOiBBdXRoQ29uZmlnKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGNvbmZpZyB0aGF0IGhhcyBiZWVuIHNldCBieSBvdGhlciBjb25zdW1lcnMgb2YgdGhlIHNlcnZpY2VcclxuICAgKi9cclxuICBnZXQoKTogQXV0aENvbmZpZyB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcgYXMgQXV0aENvbmZpZztcclxuICB9XHJcbn1cclxuIl19