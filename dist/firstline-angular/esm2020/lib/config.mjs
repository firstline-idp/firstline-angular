import { InjectionToken, Injectable, Optional, Inject } from '@angular/core';
import * as i0 from "@angular/core";
;
/**
 * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.
 *
 * @param def The route definition type
 */
export function isHttpInterceptorRouteConfig(def) {
    return typeof def !== 'string';
}
/**
 * Injection token for accessing configuration.
 *
 * @usageNotes
 *
 * Use the `Inject` decorator to access the configuration from a service or component:
 *
 * ```
 * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}
 * ```
 */
export const AuthConfigService = new InjectionToken('firstline.config');
/**
 * Gets and sets configuration for the internal client. This can be
 * used to provide configuration outside of using AuthModule.forRoot, i.e. from
 * a factory provided by APP_INITIALIZER.
 */
export class AuthClientConfig {
    constructor(config) {
        if (config) {
            this.set(config);
        }
    }
    /**
     * Sets configuration to be read by other consumers of the service (see usage notes)
     *
     * @param config The configuration to set
     */
    set(config) {
        this.config = config;
    }
    /**
     * Gets the config that has been set by other consumers of the service
     */
    get() {
        return this.config;
    }
}
AuthClientConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: AuthClientConfig, deps: [{ token: AuthConfigService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuthClientConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: AuthClientConfig, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: AuthClientConfig, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AuthConfigService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFlakMsQ0FBQztBQVU3Qzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDRCQUE0QixDQUMxQyxHQUF1QjtJQUV2QixPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQztBQUNqQyxDQUFDO0FBdUZEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsa0JBQWtCLENBQ25CLENBQUM7QUFFRjs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFtRCxNQUFtQjtRQUNwRSxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEdBQUcsQ0FBQyxNQUFrQjtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxHQUFHO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBb0IsQ0FBQztJQUNuQyxDQUFDOzs2R0F2QlUsZ0JBQWdCLGtCQUdLLGlCQUFpQjtpSEFIdEMsZ0JBQWdCLGNBREgsTUFBTTsyRkFDbkIsZ0JBQWdCO2tCQUQ1QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7MEJBSW5CLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlyc3RsaW5lQ2xpZW50T3B0aW9ucyB9IGZyb20gXCJAZmlyc3QtbGluZS9maXJzdGxpbmUtc3BhLWpzXCJcclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGEgY29tbW9uIHNldCBvZiBIVFRQIG1ldGhvZHMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBIdHRwTWV0aG9kIHtcclxuICBHZXQgPSAnR0VUJyxcclxuICBQb3N0ID0gJ1BPU1QnLFxyXG4gIFB1dCA9ICdQVVQnLFxyXG4gIFBhdGNoID0gJ1BBVENIJyxcclxuICBEZWxldGUgPSAnREVMRVRFJyxcclxuICBIZWFkID0gJ0hFQUQnLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEdldFRva2VuU2lsZW50bHlPcHRpb25zIHsgfTtcclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHRoZSB0eXBlIGZvciBhIHJvdXRlIGNvbmZpZyBlbnRyeS4gQ2FuIGVpdGhlciBiZTpcclxuICpcclxuICogLSBhbiBvYmplY3Qgb2YgdHlwZSBIdHRwSW50ZXJjZXB0b3JSb3V0ZUNvbmZpZ1xyXG4gKiAtIGEgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBcGlSb3V0ZURlZmluaXRpb24gPSBIdHRwSW50ZXJjZXB0b3JSb3V0ZUNvbmZpZyB8IHN0cmluZztcclxuXHJcbi8qKlxyXG4gKiBBIGN1c3RvbSB0eXBlIGd1YXJkIHRvIGhlbHAgaWRlbnRpZnkgcm91dGUgZGVmaW5pdGlvbnMgdGhhdCBhcmUgYWN0dWFsbHkgSHR0cEludGVyY2VwdG9yUm91dGVDb25maWcgdHlwZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBkZWYgVGhlIHJvdXRlIGRlZmluaXRpb24gdHlwZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSHR0cEludGVyY2VwdG9yUm91dGVDb25maWcoXHJcbiAgZGVmOiBBcGlSb3V0ZURlZmluaXRpb25cclxuKTogZGVmIGlzIEh0dHBJbnRlcmNlcHRvclJvdXRlQ29uZmlnIHtcclxuICByZXR1cm4gdHlwZW9mIGRlZiAhPT0gJ3N0cmluZyc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25maWd1cmF0aW9uIGZvciB0aGUgSHR0cEludGVyY2VwdG9yXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBJbnRlcmNlcHRvckNvbmZpZyB7XHJcbiAgYWxsb3dlZExpc3Q6IEFwaVJvdXRlRGVmaW5pdGlvbltdO1xyXG59XHJcblxyXG4vKipcclxuICogQ29uZmlndXJhdGlvbiBmb3IgYSBzaW5nbGUgaW50ZXJjZXB0b3Igcm91dGVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSHR0cEludGVyY2VwdG9yUm91dGVDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBVUkwgdG8gdGVzdCwgYnkgc3VwcGx5aW5nIHRoZSBVUkwgdG8gbWF0Y2guXHJcbiAgICogSWYgYHRlc3RgIGlzIGEgbWF0Y2ggZm9yIHRoZSBjdXJyZW50IHJlcXVlc3QgcGF0aCBmcm9tIHRoZSBIVFRQIGNsaWVudCwgdGhlblxyXG4gICAqIGFuIGFjY2VzcyB0b2tlbiBpcyBhdHRhY2hlZCB0byB0aGUgcmVxdWVzdCBpbiB0aGVcclxuICAgKiAgW1wiQXV0aG9yaXphdGlvblwiIGhlYWRlcl0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtb2F1dGgtdjItYmVhcmVyLTIwI3NlY3Rpb24tMi4xKS5cclxuICAgKlxyXG4gICAqIElmIHRoZSB0ZXN0IGRvZXMgbm90IHBhc3MsIHRoZSByZXF1ZXN0IHByb2NlZWRzIHdpdGhvdXQgdGhlIGFjY2VzcyB0b2tlbiBhdHRhY2hlZC5cclxuICAgKlxyXG4gICAqIEEgd2lsZGNhcmQgY2hhcmFjdGVyIGNhbiBiZSB1c2VkIHRvIG1hdGNoIG9ubHkgdGhlIHN0YXJ0IG9mIHRoZSBVUkwuXHJcbiAgICpcclxuICAgKiBAdXNhZ2Vub3Rlc1xyXG4gICAqXHJcbiAgICogJy9hcGknIC0gZXhhY3RseSBtYXRjaCB0aGUgcm91dGUgL2FwaVxyXG4gICAqICcvYXBpLyonIC0gbWF0Y2ggYW55IHJvdXRlIHRoYXQgc3RhcnRzIHdpdGggL2FwaS9cclxuICAgKi9cclxuICB1cmk/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBIdHRwUmVxdWVzdC51cmwgdmFsdWUsIGFsbG93aW5nIHlvdSB0byBkb1xyXG4gICAqIGFueSBraW5kIG9mIGZsZXhpYmxlIG1hdGNoaW5nLlxyXG4gICAqXHJcbiAgICogSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRydWUsIHRoZW5cclxuICAgKiBhbiBhY2Nlc3MgdG9rZW4gaXMgYXR0YWNoZWQgdG8gdGhlIHJlcXVlc3QgaW4gdGhlXHJcbiAgICogIFtcIkF1dGhvcml6YXRpb25cIiBoZWFkZXJdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLW9hdXRoLXYyLWJlYXJlci0yMCNzZWN0aW9uLTIuMSkuXHJcbiAgICpcclxuICAgKiBJZiBpdCByZXR1cm5zIGZhbHNlLCB0aGUgcmVxdWVzdCBwcm9jZWVkcyB3aXRob3V0IHRoZSBhY2Nlc3MgdG9rZW4gYXR0YWNoZWQuXHJcbiAgICovXHJcbiAgdXJpTWF0Y2hlcj86ICh1cmk6IHN0cmluZykgPT4gYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIG9wdGlvbnMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBTREsgd2hlbiByZXRyaWV2aW5nIHRoZVxyXG4gICAqIGFjY2VzcyB0b2tlbiB0byBhdHRhY2ggdG8gdGhlIG91dGdvaW5nIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgdG9rZW5PcHRpb25zPzogR2V0VG9rZW5TaWxlbnRseU9wdGlvbnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBIVFRQIG1ldGhvZCB0byBtYXRjaCBvbi4gSWYgc3BlY2lmaWVkLCB0aGUgSFRUUCBtZXRob2Qgb2ZcclxuICAgKiB0aGUgb3V0Z29pbmcgcmVxdWVzdCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCB0aGlzLiBJZiB0aGVyZSBpcyBubyBtYXRjaCwgdGhlXHJcbiAgICogQXV0aG9yaXphdGlvbiBoZWFkZXIgaXMgbm90IGF0dGFjaGVkLlxyXG4gICAqXHJcbiAgICogVGhlIEhUVFAgbWV0aG9kIG5hbWUgaXMgY2FzZS1zZW5zaXRpdmUuXHJcbiAgICovXHJcbiAgaHR0cE1ldGhvZD86IEh0dHBNZXRob2QgfCBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsbG93IHRoZSBIVFRQIGNhbGwgdG8gYmUgZXhlY3V0ZWQgYW5vbnltb3VzbHksIHdoZW4gbm8gdG9rZW4gaXMgYXZhaWxhYmxlLlxyXG4gICAqXHJcbiAgICogV2hlbiBvbWl0dGVkIChvciBzZXQgdG8gZmFsc2UpLCBjYWxscyB0aGF0IG1hdGNoIHRoZSBjb25maWd1cmF0aW9uIHdpbGwgZmFpbCB3aGVuIG5vIHRva2VuIGlzIGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBhbGxvd0Fub255bW91cz86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25maWd1cmF0aW9uIGZvciB0aGUgYXV0aGVudGljYXRpb24gc2VydmljZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBdXRoQ29uZmlnIGV4dGVuZHMgRmlyc3RsaW5lQ2xpZW50T3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGJ1aWx0LWluIEh0dHAgSW50ZXJjZXB0b3IsIHVzZWQgZm9yXHJcbiAgICogYXV0b21hdGljYWxseSBhdHRhY2hpbmcgYWNjZXNzIHRva2Vucy5cclxuICAgKi9cclxuICBodHRwSW50ZXJjZXB0b3I/OiBIdHRwSW50ZXJjZXB0b3JDb25maWc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbmd1bGFyIHNwZWNpZmljIHN0YXRlIHRvIGJlIHN0b3JlZCBiZWZvcmUgcmVkaXJlY3RcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwU3RhdGUge1xyXG5cclxuICAvKipcclxuICAgKiBBbnkgY3VzdG9tIHBhcmFtZXRlciB0byBiZSBzdG9yZWQgaW4gYXBwU3RhdGVcclxuICAgKi9cclxuICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmplY3Rpb24gdG9rZW4gZm9yIGFjY2Vzc2luZyBjb25maWd1cmF0aW9uLlxyXG4gKlxyXG4gKiBAdXNhZ2VOb3Rlc1xyXG4gKlxyXG4gKiBVc2UgdGhlIGBJbmplY3RgIGRlY29yYXRvciB0byBhY2Nlc3MgdGhlIGNvbmZpZ3VyYXRpb24gZnJvbSBhIHNlcnZpY2Ugb3IgY29tcG9uZW50OlxyXG4gKlxyXG4gKiBgYGBcclxuICogY2xhc3MgTXlTZXJ2aWNlKEBJbmplY3QoQXV0aENvbmZpZ1NlcnZpY2UpIGNvbmZpZzogQXV0aENvbmZpZykge31cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQXV0aENvbmZpZ1NlcnZpY2UgPSBuZXcgSW5qZWN0aW9uVG9rZW48QXV0aENvbmZpZz4oXHJcbiAgJ2ZpcnN0bGluZS5jb25maWcnXHJcbik7XHJcblxyXG4vKipcclxuICogR2V0cyBhbmQgc2V0cyBjb25maWd1cmF0aW9uIGZvciB0aGUgaW50ZXJuYWwgY2xpZW50LiBUaGlzIGNhbiBiZVxyXG4gKiB1c2VkIHRvIHByb3ZpZGUgY29uZmlndXJhdGlvbiBvdXRzaWRlIG9mIHVzaW5nIEF1dGhNb2R1bGUuZm9yUm9vdCwgaS5lLiBmcm9tXHJcbiAqIGEgZmFjdG9yeSBwcm92aWRlZCBieSBBUFBfSU5JVElBTElaRVIuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQXV0aENsaWVudENvbmZpZyB7XHJcbiAgcHJpdmF0ZSBjb25maWc/OiBBdXRoQ29uZmlnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KEF1dGhDb25maWdTZXJ2aWNlKSBjb25maWc/OiBBdXRoQ29uZmlnKSB7XHJcbiAgICBpZiAoY29uZmlnKSB7XHJcbiAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGNvbmZpZ3VyYXRpb24gdG8gYmUgcmVhZCBieSBvdGhlciBjb25zdW1lcnMgb2YgdGhlIHNlcnZpY2UgKHNlZSB1c2FnZSBub3RlcylcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIGNvbmZpZ3VyYXRpb24gdG8gc2V0XHJcbiAgICovXHJcbiAgc2V0KGNvbmZpZzogQXV0aENvbmZpZyk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBjb25maWcgdGhhdCBoYXMgYmVlbiBzZXQgYnkgb3RoZXIgY29uc3VtZXJzIG9mIHRoZSBzZXJ2aWNlXHJcbiAgICovXHJcbiAgZ2V0KCk6IEF1dGhDb25maWcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnIGFzIEF1dGhDb25maWc7XHJcbiAgfVxyXG59XHJcbiJdfQ==